# importa√ß√£o necess√°ria para evitar erros de importa√ß√£o circular
from __future__ import annotations  # ‚úÖ PRIMEIRA LINHA SEMPRE

# Importa√ß√µes necess√°rias para o FastAPI e autentica√ß√£o JWT
from fastapi import APIRouter, HTTPException, Depends, status
from fastapi_jwt_auth import AuthJWT

# Importa√ß√£o do bcrypt para hash de senhas
from passlib.hash import bcrypt

#Importa√ß√µes relativas ao banco de dados e modelos
from app.database import get_db
from sqlalchemy.orm import Session
from app.schemas.auth import UserCreate, UserLogin
from app.models.user_model import User  # ‚úÖ Importando diretamente o modelo
from app.models.clinica_model import Clinica  # ‚úÖ Importando o modelo de Cl√≠nica

# Importa√ß√£o do m√©todo de autentica√ß√£o personalizado
from app.dependencies.auth import get_current_user_com_clinica

# Cria√ß√£o do roteador para as rotas de autentica√ß√£o
router = APIRouter()

# Cria√ß√£o das rotas
# üîπ Rota de Registro de usu√°rio
@router.post("/clinicas/{nome}/register")
def register(nome: str, user: UserCreate, db: Session = Depends(get_db)):

    # Verifica se a cl√≠nica existe
    clinica = db.query(Clinica).filter_by(dominio=nome).first()
    if not clinica:
        raise HTTPException(status_code=404, detail="Cl√≠nica n√£o encontrada")

    # Verifica se o email j√° foi cadastrado
    if db.query(User).filter_by(email=user.email).first():
        raise HTTPException(status_code=400, detail="Email j√° cadastrado")

    # Cria o novo usu√°rio vinculado √† cl√≠nica
    hashed_pw = bcrypt.hash(user.password)
    db_user = User(
        name=user.name,
        email=user.email,
        hashed_password=hashed_pw,
        perfil="paciente",
        clinica_id=clinica.id
    )

    db.add(db_user)
    db.commit()
    db.refresh(db_user)

    return {"msg": "Usu√°rio registrado com sucesso"}

# üîπ Rota de Login de usu√°rio
@router.post("/login")
def login(user: UserLogin, db: Session = Depends(get_db), Authorize: AuthJWT = Depends()):
    db_user = db.query(User).filter_by(email=user.email).first()

    if not db_user or not bcrypt.verify(user.password, db_user.hashed_password):
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Credenciais inv√°lidas")

    access_token = Authorize.create_access_token(
        subject=user.email,
        user_claims={"clinica_id": db_user.clinica_id}
    )

    # üîπ Busca o dom√≠nio da cl√≠nica associada ao usu√°rio
    clinica = db.query(Clinica).filter(Clinica.id == db_user.clinica_id).first()

    return {
        "access_token": access_token,
        "clinica_dominio": clinica.dominio,  # ‚Üê esse valor deve ser usado no frontend para redirecionar
        "perfil": db_user.perfil,
        "name": db_user.name,
        "email": db_user.email
    }


# üîπ Rota para obter o usu√°rio autenticado (GET /auth/me)
@router.get("/me")
def get_me(current_user: User = Depends(get_current_user_com_clinica)):
    return {
        "id": current_user.id,
        "name": current_user.name,
        "email": current_user.email,
        "perfil": current_user.perfil,
    }


